; Script generated by Cline AI

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
; AppId={{AUTO_GENERATED_GUID}} ; It's recommended to generate a fixed GUID for your application
AppId={{4ff89bd9-85de-488e-a184-c23846878629}}
AppName=TikBolt
AppVersion=1.1
AppVerName=TikBolt 1.1 ; Uncommented and set
AppPublisher=杨先生团队
DefaultDirName={localappdata}\TikBolt
DisableProgramGroupPage=yes
; LicenseFile=..\LICENSE ; Display license file during installation
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
OutputBaseFilename=TikBoltSetup-v1.1
SetupIconFile=..\tiktok.ico
; WizardImageFile=path\to\your\wizard-image.bmp ; Optional: Add a large wizard image (55x58 pixels)
; WizardSmallImageFile=path\to\your\wizard-small-image.bmp ; Optional: Add a small wizard image (164x314 pixels)
UninstallDisplayIcon={app}\TikBolt.exe
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "chinese"; MessagesFile: "..\ChineseSimplified.isl"
Name: "english"; MessagesFile: "compiler:Default.isl"

[Types]
Name: "default"; Description: "Default installation"; Flags: iscustom

[Components]
Name: "program"; Description: "Program Files"; Types: default; Flags: fixed
Name: "lang"; Description: "Interface Language"; Types: default;
Name: "lang\zh_CN"; Description: "简体中文界面"; Types: default; Flags: exclusive
Name: "lang\en"; Description: "English Interface"; Types: default; Flags: exclusive

[Files]
Source: "dist\TikBolt\*"; DestDir: "{app}"; Components: program; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "translations\*.qm"; DestDir: "{app}\translations"; Flags: ignoreversion
Source: "img\*"; DestDir: "{app}\img"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\TikBolt"; Filename: "{app}\TikBolt.exe"
Name: "{autodesktop}\TikBolt"; Filename: "{app}\TikBolt.exe"

[Run]
Filename: "{app}\TikBolt.exe"; Description: "{cm:LaunchProgram,TikBolt}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{app}\translations"

[Code]
// Function to read the content of a file into a string list
function LoadStringsFromFile(const FileName: string; var SList: TStringList): Boolean;
begin
  Result := FileExists(FileName);
  if Result then
  begin
    SList.LoadFromFile(FileName);
  end;
end;

// Function to save a string list to a file
procedure SaveStringsToFile(const FileName: string; SList: TStringList);
begin
  SList.SaveToFile(FileName);
end;

// Function to update or add the preferred_language in the config JSON (simple string manipulation)
procedure SetPreferredLanguage(const ConfigFile: string; const LangCode: string);
var
  Lines: TStringList;
  I: Integer;
  Found: Boolean;
  NewLine: string;
  Indent: string;
  Line: string;
  CommaNeeded: Boolean;
begin
  Lines := TStringList.Create;
  try
    if LoadStringsFromFile(ConfigFile, Lines) then
    begin
      Found := False;
      Indent := '    '; // Assume 4 spaces indentation
      NewLine := Indent + '"preferred_language": "' + LangCode + '"';

      for I := 0 to Lines.Count - 1 do
      begin
        Line := Trim(Lines[I]);
        // Check if the line contains the key
        if Pos('"preferred_language":', Line) > 0 then
        begin
          // Check if the previous line ends with a comma
          if (I > 0) and (Trim(Lines[I-1]) <> '{') and (Copy(Trim(Lines[I-1]), Length(Trim(Lines[I-1])), 1) <> ',') then
          begin
             Lines[I-1] := Lines[I-1] + ','; // Add comma to previous line if needed
          end;

          // Check if the current line needs a comma at the end
          if (I < Lines.Count - 1) and (Trim(Lines[I+1]) <> '}') then
          begin
            Lines[I] := NewLine + ','; // Replace line and add comma
          end else
          begin
             Lines[I] := NewLine; // Replace line, no comma needed
          end;
          Found := True;
          Log(Format('Updated preferred_language in %s to %s', [ConfigFile, LangCode]));
          break;
        end;
      end;

      // If not found, add it before the closing brace '}'
      if not Found then
      begin
        for I := Lines.Count - 1 downto 0 do
        begin
          Line := Trim(Lines[I]);
          if Line = '}' then
          begin
            // Check if the line before the closing brace needs a comma
            if (I > 0) and (Trim(Lines[I-1]) <> '{') and (Copy(Trim(Lines[I-1]), Length(Trim(Lines[I-1])), 1) <> ',') then
            begin
               Lines[I-1] := Lines[I-1] + ','; // Add comma to the actual last setting line
            end;
            // Insert the new language line before the closing brace
            Lines.Insert(I, NewLine);
            Log(Format('Added preferred_language to %s: %s', [ConfigFile, LangCode]));
            Found := True; // Mark as found because we added it
            break;
          end;
        end;
         // If still not found (e.g., empty or invalid JSON), log error but don't crash
         if not Found then
         begin
            Log(Format('[SetPreferredLanguage] Could not find place to insert preferred_language in %s. JSON might be empty or invalid.', [ConfigFile]));
         end;
      end;

      // Save the modified lines back to the file
      if Found then // Only save if we actually made a change or added the line
      begin
         try
           SaveStringsToFile(ConfigFile, Lines);
           Log(Format('[SetPreferredLanguage] Successfully saved changes to %s', [ConfigFile]));
         except
           Log(Format('[SetPreferredLanguage] Exception saving changes to %s: %s', [ConfigFile, GetExceptionMessage]));
         end;
      end;

    end else
    begin
      Log(Format('[SetPreferredLanguage] Config file %s not found. Cannot set preferred language.', [ConfigFile]));
      // Do not create the file here, let the application handle its creation.
      // Lines.Add('{');
      // Lines.Add('    "preferred_language": "' + LangCode + '"');
      // Lines.Add('}');
      // SaveStringsToFile(ConfigFile, Lines);
      // Log(Format('Created new config file %s with preferred_language: %s', [ConfigFile, LangCode]));
    end;
  finally
    Lines.Free;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  LangCode: string;
  ConfigFile: string;
begin
  if CurStep = ssPostInstall then
  begin
    ConfigFile := ExpandConstant('{app}\config.json');
      Log('[CurStepChanged] PostInstall step reached. Checking selected language component.');

    if IsComponentSelected('lang\zh_CN') then
    begin
      LangCode := 'zh_CN';
      Log('[CurStepChanged] Selected language: zh_CN');
    end
    else if IsComponentSelected('lang\en') then
    begin
      LangCode := 'en';
      Log('[CurStepChanged] Selected language: en');
    end
    else
    begin
      LangCode := 'zh_CN'; // Default to zh_CN if somehow none is selected (shouldn't happen with exclusive flag)
      Log('[CurStepChanged] No specific language component selected, defaulting to zh_CN.');
    end;

    // Update the config file
    Log(Format('[CurStepChanged] Attempting to set preferred language to %s in %s', [LangCode, ConfigFile]));
    // SetPreferredLanguage(ConfigFile, LangCode); // *** Cline AI: DISABLED - Config file is now managed in AppData by the application itself. ***
    Log('[CurStepChanged] Modification of config.json by installer is DISABLED (config now in AppData).');
  end;
end;
